stages:
  # - setup
  # - build
  - deploy

# services:
#   - docker:dind

# variables:
#   DOCKER_IMAGE_NAME: "$ACR_USERNAME.azurecr.io/$DOCKER_IMAGE"
#   DOCKER_IMAGE_TAG: "latest"

# build:
#   stage: build
#   image: docker:latest
#   script:
#     - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
#     - docker login $REGISTRY_NAME.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD
#     - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
#     - echo "Application successfully deployed."


# terraform_setup:
#   stage: setup
#   image:
#     name: hashicorp/terraform:light
#     entrypoint: [""]

#   before_script:
#     - apk add --no-cache --update python3 py3-pip
#     - apk add --no-cache --update --virtual=build gcc musl-dev python3-dev libffi-dev openssl-dev cargo make && pip3 install --no-cache-dir --prefer-binary azure-cli && apk del build
#     - apk update
#     - az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
    # - terraform --version
    # - terraform init
    # - terraform validate
    # - terraform plan 



  # script:
    # - terraform apply -auto-approve
    # - az aks get-credentials --resource-group aa --name weather
    # - terraform destroy -auto-approve

# deploy:
#   stage: deploy
#   image:
#     name: bitnami/kubectl:latest
#     entrypoint: ['']
    
#   before_script:
#     - apk add --no-cache --update python3 py3-pip
#     - apk add --no-cache --update --virtual=build gcc musl-dev python3-dev libffi-dev openssl-dev cargo make && pip3 install --no-cache-dir --prefer-binary azure-cli && apk del build
#     - apk update
#     - az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
#   script:
#     - kubectl version
#     - az aks get-credentials --resource-group aa --name weather
#     - kubectl get nodes
    # Add your kubectl commands here
    # - kubectl apply -f your_manifest.yaml
    # - kubectl get pods
    # Add more kubectl commands as needed

deploy:
  stage: deploy
  image: ubuntu:latest
  script:
    - apt-get update
    # - apt-get install -y azure-cli
    # - az --version
    # - az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
    # - az aks get-credentials --resource-group your_resource_group --name your_aks_cluster
    - apt-get install -y apt-transport-https ca-certificates curl
    - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    - apt-get update
    - apt-get install -y kubectl
    - kubectl version
    # Add your kubectl commands here
    - kubectl get nodes
  only:
    - main
