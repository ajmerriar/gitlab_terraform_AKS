stages:
  # - build
  - deploy

# services:
#   - docker:dind

# variables:
#   DOCKER_IMAGE_NAME: "$ACR_USERNAME.azurecr.io/$DOCKER_IMAGE"
#   DOCKER_IMAGE_TAG: "latest"

# build:
#   stage: build
#   image: docker:latest
#   script:
#     - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
#     - docker login $REGISTRY_NAME.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD
#     - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
#     - echo "Application successfully deployed."


terraform_setup:
  stage: deploy
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]

  before_script:
    - apk add --no-cache --update python3 py3-pip
    - apk add --no-cache --update --virtual=build gcc musl-dev python3-dev libffi-dev openssl-dev cargo make && pip3 install --no-cache-dir --prefer-binary azure-cli && apk del build
    - az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
    # - terraform --version
    # - terraform init
    # - terraform validate
    # - terraform plan 
    - |
      mkdir -p /usr/local/bin \
      && curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" \
      && chmod +x ./kubectl \
      && mv ./kubectl /usr/local/bin/kubectl

  script:
    # - terraform apply -auto-approve
    # - az aks get-credentials --resource-group aa --name weather
    - kubectl get nodes
    - terraform destroy -auto-approve


  only:
    - main
